version: '3'

networks:
  kafka-network:
    driver: bridge

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181                 # Set the desired Zookeeper client port
      ZOOKEEPER_TICK_TIME: 2000                   #
      ZOOKEEPER_SYNC_LIMIT: 2                     # Set the Zookeeper sync limit
      ZOOKEEPER_SERVER_ID: 1                      # sets the unique server ID for this Zookeeper instance. This must be an integer between 1 and 255.
      ZOOKEEPER_SERVERS: "zookeeper:2888:3888"    # Set the Zookeeper servers
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      # INTERNAL://kafka:19092, This is an internal endpoint for communication within the Docker network. This is the address that other services within the same Docker network should use to connect to the Kafka broker.
      # EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092, This is an external endpoint for communication from outside the Docker network. This is the address that clients outside the Docker network should use to connect to the Kafka broker.
      # DOCKER://host.docker.internal:29092, This endpoint allows clients running on the host machine to connect to Kafka using the special hostname.
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  spark:
    image: 'docker.io/bitnami/spark:3'
    container_name: spark_master
    hostname: spark_master
    user: root
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
    networks:
      - kafka-network

  reddit-fetcher:
    build:
      dockerfile: Dockerfile
    environment:
      KAFKA_BROKER: kafka:19092 # since we are on the same network, we will use the internal endpoint
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network